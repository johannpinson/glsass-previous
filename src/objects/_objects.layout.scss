@use "sass:map";

@use "../settings/settings.core" as core;

@use "../tools/tools.breakpoints" as breakpoints;
@use "../tools/tools.global" as *;

$o-layout-gutter-spacing: core.$g-grid-gutter-width / 2;

%_o-layout_placeholder {
  position: relative;
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  padding-right: $o-layout-gutter-spacing;
  padding-left: $o-layout-gutter-spacing;
}

.o-layout {
  @extend %_o-layout_placeholder;

  @each $breakpoint, $max-width in core.$g-grid-container-max-widths {
    @include mq($breakpoint) {
      max-width: $max-width;
    }
  }

  &--fluid {
    @extend %_o-layout_placeholder;
  }
}

// Responsive containers that are 100% wide until a breakpoint
@each $breakpoint, $max-width in core.$g-grid-container-max-widths {
  $suffix: breakpoints.suffix($breakpoint);

  .o-layout#{$suffix} {
    @extend %_o-layout_placeholder;
  }

  // stylelint-disable-next-line order/order
  @include breakpoints.media-up($breakpoint) {
    %_o-responsive-container-#{$breakpoint} {
      max-width: $max-width;
    }

    // stylelint-disable-next-line order/order
    @each $name, $width in core.$g-grid-breakpoints {
      @if ($max-width > $width or $breakpoint == $name) {
        .o-layout#{breakpoints.suffix($name)} {
          @extend %_o-responsive-container-#{$breakpoint};
        }
      }
    }
  }
}

.o-row {
  display: flex;
  flex-wrap: wrap;
  margin-right: -$o-layout-gutter-spacing;
  margin-left: -$o-layout-gutter-spacing;
}

@each $breakpoint, $value in core.$g-grid-breakpoints {
  $suffix: breakpoints.suffix($breakpoint);

  @include breakpoints.media-up($breakpoint) {
    %_grid-column-#{$breakpoint} {
      position: relative;
      flex-grow: 1;
      flex-basis: 0;
      width: 100%;
      max-width: 100%;
      padding-right: $o-layout-gutter-spacing;
      padding-left: $o-layout-gutter-spacing;
    }

    // .o-col-auto#{$suffix} { // TODO usefull or useless?
    .o-col#{$suffix} {
      @extend %_grid-column-#{$breakpoint};
    }
  }
}

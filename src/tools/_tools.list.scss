@use "sass:list";
@use "sass:meta";

// Credit: https://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/

/**
 * Retrieves the first element of a list
 */
@function first($list) {
  @if (meta.type-of($list) != "list") {
    @error "Invalid format: the `$list` parameter must be a list value type.";
  }

  @return list.nth($list, 1);
}

/**
 * Retrieves the last element of a list
 */
@function last($list) {
  @if (meta.type-of($list) != "list") {
    @error "Invalid format: the `$list` parameter must be a list value type.";
  }

  @return list.nth($list, list.length($list));
}

/**
 * Add news values at beginning of the list - opposite logic of `list.append`
 */
@function prepend($list, $value) {
  @if (meta.type-of($list) != "list") {
    @error "Invalid format: the `$list` parameter must be a list value type.";
  }

  @return list.join($value, $list);
}

/**
 * Convert a list into the string, with the ability to use a string to join
 * elements with each others.
 */
@function to-string($list, $glue: "", $is-nested: false) {
  $result: null;

  @if (meta.type-of($list) != "list") {
    @error "Invalid format: the `$list` parameter must be a list value type.";
  }

  @for $i from 1 through list.length($list) {
    $e: list.nth($list, $i);

    @if type-of($e) == list {
      $result: $result + #{to-string($e, $glue, true)};
    } @else {
      $result: if(
        $i != list.length($list) or $is-nested,
        $result + #{$e} + #{$glue},
        $result + #{$e}
      );
    }
  }

  @return $result;
}

/**
 * Indicates if the list is empty
 *
 * @returns Boolean
 */
@function is-empty($list) {
  @return list.length($list) == 0;
}

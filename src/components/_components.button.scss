@use "sass:map";
@use "sass:list";
@use "sass:meta";
@use "sass:math";

@use "../settings/settings.colors" as colors;
@use "../settings/settings.core" as core;
@use "../settings/settings.ui" as ui;

@use "../tools/tools.spacing" as spacing;
@use "../tools/tools.unit" as unit;
@use "../tools/tools.color" as _color;
@use "../tools/tools.global" as *;

$c-button-border-width: unit.convert(ui.$g-border-width) !default;

$c-button-round-default: true !default;
$c-button-radius: ui.$g-border-radius !default;

$c-button-font-size: core.$g-font-size-base-rem !default;
$c-button-font-ratio: 1/8 !default;

$c-button-font-size-small: $c-button-font-size * (1 - $c-button-font-ratio) !default;
$c-button-font-size-large: $c-button-font-size * (1 + $c-button-font-ratio) !default;

$c-button-line-height: core.$g-font-line-height-base !default;

$c-button-line-height-small: $c-button-line-height *
  (
    1 - 1 /
      (
        $c-button-line-height *
          unit.strip-unit(unit.convert-px($c-button-font-size)) *
          (1 - $c-button-font-ratio)
      )
  );

$c-button-line-height-large: $c-button-line-height *
  (
    1 + 1 /
      (
        $c-button-line-height *
          unit.strip-unit(unit.convert-px($c-button-font-size)) *
          (1 + $c-button-font-ratio)
      )
  );

$c-button-focus-shadow-width: ui.$g-shadow-width !default;

// $c-button-margin-icon: spacing.add-space(2) !default;

$c-button-padding-y: spacing.add-space(2) !default;
$c-button-padding-x: 1.25rem !default;
$c-button-padding-ratio: 1/3 !default;

$c-button-padding-x-small: $c-button-padding-x * (1 - $c-button-padding-ratio) -
  $c-button-border-width !default;
$c-button-padding-x-large: $c-button-padding-x * (1 + $c-button-padding-ratio) -
  $c-button-border-width !default;
$c-button-padding-y-small: $c-button-padding-y * (1 - $c-button-padding-ratio) -
  $c-button-border-width !default;
$c-button-padding-y-large: $c-button-padding-y * (1 + $c-button-padding-ratio) -
  $c-button-border-width !default;

$c-button-padding-y: $c-button-padding-y - $c-button-border-width;
$c-button-padding-x: $c-button-padding-x - $c-button-border-width;

$c-button-variants: () !default;
$c-button-variants: list.join(
  (
    "primary",
    "secondary",
    "success",
    "danger",
    "warning",
    "info",
    "light",
    "dark",
    "white"
  ),
  $c-button-variants
);

.c-button {
  $_border-radius: $c-button-radius;

  @if not $c-button-round-default {
    $_border-radius: null;
  }

  display: inline-block;
  flex-shrink: 0;
  padding: $c-button-padding-y $c-button-padding-x;
  color: cv("text");
  font-size: $c-button-font-size;
  line-height: $c-button-line-height;
  text-align: center;
  text-decoration: none;
  vertical-align: middle;
  background-color: transparent;
  border: $c-button-border-width solid transparent;
  border-radius: $_border-radius;
  transition: all 0.35s ui.$g-transition-timing-function;
  user-select: none;

  &:not(:disabled):not(.disabled):not(.is-inactive):hover {
    color: cv(text);
    text-decoration: none;
    cursor: pointer;
  }

  &:focus,
  &.focus {
    outline: 0;
    box-shadow: 0 0 0 $c-button-focus-shadow-width rgba(cv(primary), 0.25);
  }

  &:disabled,
  &.disabled {
    opacity: 0.65;
    pointer-events: none;
  }

  &:not(:disabled):not(.disabled):not(.is-inactive):active,
  &:not(:disabled):not(.disabled):not(.is-inactive).active {
    // nothing
  }

  svg {
    vertical-align: middle;
  }
}

// Generate modifiers class for colors variant
@each $color in $c-button-variants {
  @if map.get(colors.$g-color-theme-colors, $color) {
    $value: map.get(colors.$g-color-theme-colors, $color);

    .c-button--#{$color} {
      $_hover_value: _color.shade($value);
      $_active-value: "";
      $_opacity-value: 0.25;

      @if (cv($color, "600", false)) {
        $_active-value: cv($color, "600");
      } @else {
        $_active-value: _color.shade($value, 2);
      }

      // stylelint-disable-next-line order/order
      @if ($color == "light") {
        $_opacity-value: 0.5;
      }

      color: _color.yiq-contrast($value);
      background-color: $value;
      border-color: $value;

      &:not(:disabled):not(.disabled):not(.is-inactive):hover {
        color: _color.yiq-contrast($_hover-value);
        background-color: $_hover-value;
        border-color: $_hover-value;
      }

      &:focus,
      &.focus {
        color: _color.yiq-contrast($_hover-value);
        background-color: $_hover-value;
        border-color: $_hover-value;
        box-shadow: 0
          0
          0
          $c-button-focus-shadow-width
          rgba($value, $_opacity-value);
      }

      &:not(:disabled):not(.disabled):not(.is-inactive):active,
      &:not(:disabled):not(.disabled):not(.is-inactive).active {
        color: _color.yiq-contrast($_active-value);
        background-color: $_active-value;
        border-color: $_active-value;
      }
    }
  }
}

// Link as button
.c-button--link {
  color: cv("link");

  &:not(:disabled):not(.disabled):not(.is-inactive):hover {
    color: _color.shade(cv("link"));
    text-decoration: underline;
  }

  &:focus,
  &:focus {
    text-decoration: none;
    box-shadow: none;
  }

  &:disabled,
  &.disabled {
    color: cv("text", "muted");
  }
}

// Outline button style
@each $color in $c-button-variants {
  @if map.get(colors.$g-color-theme-colors, $color) {
    $color-value: map.get(colors.$g-color-theme-colors, $color);
    $border-value: $color-value;

    $root-outline: ".c-button--outline";

    @if ($color == "light") {
      $color-value: cv("gray", 700);
      $border-value: cv("gray", 300);
    }

    #{$root-outline}.c-button--#{$color} {
      color: $color-value;
      background-color: transparent;
      border-color: $border-value;
    }
  }
}

// Rounded border button version
// ! This style isn't used still the default design automatically add radius
// ! on buttons. Maybe add an option to make it availalbe independently of the
// ! global configured ui
@if not $c-button-round-default {
  .c-button--round, // Alt name
  .c-button--rounded {
    border-radius: $c-button-radius;
  }
}

.c-button--pill {
  // padding: .75rem 1.25rem;
  border-radius: 4rem;
}

/**
 * 1. Ensure the full with of the btn if the element is a button/input[submit] tag
 */
.c-button--block {
  display: block;
  width: 100%; /* [1] */
}

.c-button--icon {
  padding: $c-button-padding-y;
}

.c-button--small {
  padding: $c-button-padding-y-small $c-button-padding-x-small;
  font-size: $c-button-font-size-small;
  line-height: $c-button-line-height-small;

  &.c-button--icon {
    padding: $c-button-padding-y-small;
  }
}

.c-button--large {
  padding: $c-button-padding-y-large $c-button-padding-x-large;
  font-size: $c-button-font-size-large;
  line-height: $c-button-line-height-large;

  &.c-button--icon {
    padding: $c-button-padding-y-large;
  }
}

.c-button--group {
  position: relative;
  display: inline-flex;
  vertical-align: middle;

  > .c-button {
    flex: 1 1 auto;
    border-radius: 0;

    &:first-child {
      border-top-left-radius: $c-button-radius;
      border-bottom-left-radius: $c-button-radius;
    }

    &:last-child {
      border-top-right-radius: $c-button-radius;
      border-bottom-right-radius: $c-button-radius;
    }

    &:hover,
    &:focus {
      z-index: 1;
    }
  }

  &-vertical {
    flex-direction: column;

    > .c-button {
      &:first-child {
        border-top-right-radius: $c-button-radius;
        border-bottom-left-radius: 0;
      }

      &:last-child {
        border-top-right-radius: 0;
        border-bottom-left-radius: $c-button-radius;
      }
    }
  }
}

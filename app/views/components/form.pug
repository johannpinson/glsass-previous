extends ../_layout/_docs.pug

block variables
  - var slug = 'form'
  - var parent = 'components'

block docs
  h1 Form
  p Forms provide the most common control styles used in forms, including input,
    | textarea, select, checkbox, radio and switch.

  h2 Group & Inline
  p The two components #[c-form__group] and #[c-form__inline] can be used to
    | manage the flow of elements like label, inputs and validation texts.
    br
    | In some case, the #[c-form__group] class can be replace by the utility class #[u-mb-3] to add some margin.

  .o-row
    .o-col.u-6
      .c-form__group
        label.c-form__label(for="test") Test
        input.c-form__control(type="text" id="test" name="test" required)
        span.c-form__text This field is required
  .o-row
    .o-col.u-6
      fieldset.c-form__group
        .c-form__inline
          legend Are you a front-end developer?
          .c-form__toggle
            input.c-form__toggle-input(type="radio" name="tg" id="tg1")
            label.c-form__toggle-label(for="tg1") Yes
            input.c-form__toggle-input(type="radio" name="tg" id="tg2")
            label.c-form__toggle-label(for="tg2") No

  pre.code(data-lang='HTML')
    code
      :highlight(lang="html")
        <div class="c-form__group">
          <label class="c-form__label" for="test">Test</label>
          <input class="c-form__control" type="text" id="test" name="test" required>
          <span class="c-form__text">This field is required</span>
        </div>

        <fieldset class="c-form__group">
          <div class="c-form__inline">
            <legend>Are you a front-end developer?</legend>
            <div class="c-form__toggle">
              <input class="c-form__toggle-input" type="radio" name="tg" id="tg1">
              <label class="c-form__toggle-label" for="tg1">Yes</label>
              <input class="c-form__toggle-input" type="radio" name="tg" id="tg2">
              <label class="c-form__toggle-label" for="tg2">No</label>
            </div>
          </div>
        </fieldset>
  h2 Label

  p The #[code c-form__label] class add some aesthetic styles like font-weight and adjust the vertical rhythm.

  .u-mb-3
    label.c-form__label() My label

  pre.code(data-lang='HTML')
    code
      :highlight(lang="html")
        <label class="c-form__label" for="my-label">My label</label>
  h2 Controls (a.k.a. Input and Textarea)

  p The #[code c-form__control] component can be use both on input (text, email, password...) and textarea

  .o-row
    .o-col.u-6(class="u-4@md")
      .c-form__group
        label.c-form__label(for="username") Username
        input.c-form__control(type="text" id="username" name="username" placeholder="Username")
      .c-form__group
        label.c-form__label(for="email") Email
        input.c-form__control(type="email" id="email" name="email" placeholder="email@example.com")
      .c-form__group
        label.c-form__label(for="message") Message
        textarea.c-form__control(id="message" name="message" placeholder="Add your message")

  pre.code(data-lang='HTML')
    code
      :highlight(lang="html")
        <div class="c-form__group">
          <label class="c-form__label" for="name">Name</label>
          <input class="c-form__control" type="text" id="name" name="name" placeholder="Name">
        </div>
  h2 Select

  .o-row
    .o-col.u-6(class="u-4@md")
      .c-form__group
        select.c-form__select(name="list" id="list")
          option(value disabled selected) Choose an option
          option(value="1") One
          option(value="2") Two
          option(value="3") Three
      .c-form__group
        select.c-form__select(name="list" id="list" multiple size="2")
          option(value disabled selected) Choose an option
          option(value="1") One
          option(value="2") Two
          option(value="3") Three
          option(value="4") Four
          option(value="5") Five
          option(value="6") Six

  pre.code(data-lang='HTML')
    code
      :highlight(lang="html")
        <div class="c-form__group">
          <select name="list" id="list" class="c-form__select">
            <option value disabled selected>Choose an option</option>
            <option value="1">One</option>
            <option value="2">Two</option>
            <option value="3">Three</option>
            ...
          </select>
        </div>
  h2 Checkbox

  .c-form__group
    .c-form__check
      input.c-form__check-input(type="checkbox" name="checkfield" id="check1" required)
      label.c-form__check-label(for="check1") Option 1
    .c-form__check
      input.c-form__check-input(type="checkbox" name="checkfield" id="check2")
      label.c-form__check-label(for="check2") Option 2

  pre.code(data-lang='HTML')
    code
      :highlight(lang="html")
        <div class="c-form__group">
          <div class="c-form__check">
            <input class="c-form__check-input" type="checkbox" name="checkfield" id="check1" required>
            <label class="c-form__check-label" for="check1">Option 1</label>
          </div>
          <div class="c-form__check">
            <input class="c-form__check-input" type="checkbox" name="checkfield" id="check2">
            <label class="c-form__check-label" for="check2">Option 2</label>
          </div>
        </div>
  h2 Radio

  fieldset.c-form__group
    legend.c-form__label Gender
    .c-form__check
      input.c-form__check-input(type="radio" name="gender" id="male" required)
      label.c-form__check-label(for="male") Male
    .c-form__check
      input.c-form__check-input(type="radio" name="gender" id="female")
      label.c-form__check-label(for="female") Female

  pre.code(data-lang='HTML')
    code
      :highlight(lang="html")
        <fieldset class="c-form__group">
          <legend class="c-form__label">Gender</legend>
          <div class="c-form__check">
            <input class="c-form__check-input" type="radio" name="gender" id="male" required>
            <label class="c-form__check-label" for="male">Male</label>
          </div>
          <div class="c-form__check">
            <input class="c-form__check-input" type="radio" name="gender" id="female">
            <label class="c-form__check-label" for="female">Female</label>
          </div>
        </fieldset>
  h2 Toggle

  p The toggle component allow a specific display for #[code radio] inputs when the possible choice are like "true/false" answers.

  .o-row
    .o-col.u-6(class="u-3@md")
      fieldset.c-form__group
        .c-form__inline
          legend Are you sure?
          .c-form__toggle
            input.c-form__toggle-input(type="radio" name="toggle" id="toggle1")
            label.c-form__toggle-label(for="toggle1") Yes
            input.c-form__toggle-input(type="radio" name="toggle" id="toggl2")
            label.c-form__toggle-label(for="toggl2") No

  pre.code(data-lang='HTML')
    code
      :highlight(lang="html")
        <fieldset class="c-form__group">
          <div class="c-form__inline">
            <legend>Are you sure?</legend>
            <div class="c-form__toggle">
              <input class="c-form__toggle-input" type="radio" name="toggle" id="toggle1">
              <label class="c-form__toggle-label" for="toggle1">Yes</label>
              <input class="c-form__toggle-input" type="radio" name="toggle" id="toggl2">
              <label class="c-form__toggle-label" for="toggl2">No</label>
            </div>
          </div>
        </fieldset>
  h2 Switch (soon)

  p This is an alternative style for #[code checkbox] inputs.


  h2 File

  .o-row
    .o-col.u-6(class="u-4@md")
      .c-form__group
        span.c-form__label Add a profile picture
        input.c-form__file-input(type="file" name="picture" id="picture" data-multiple-caption="{count} files selected" multiple required)
        label.c-form__file-label(for="picture")
          strong Choose a file
          span

  script.
    const getNextSibling = (el, selector) => {
      let sibling = el.nextElementSibling

      if (!selector) return sibling

      while (sibling) {
        if (sibling.matches(selector)) return sibling

        sibling = sibling.nextElementSibling
      }

      return sibling
    }

    if (document.querySelector('input[type=file]')) {
      Array.prototype.forEach.call(
        document.querySelectorAll('input[type=file]'),
        (input) => {
          const label = getNextSibling(input, 'label')

          input.addEventListener('change', (e) => {
            label.querySelector('span').innerHTML = 'Loading...'

            if (e.target) {
              let text = ''
              const { files } = input
              const multipleText =
                input.getAttribute('data-multiple-caption') ||
                '{count} files selected'

              if (files && files.length > 1) {
                text = multipleText.replace('{count}', files.length.toString())
              } else {
                text = e.target.value.split('\\').pop()
              }

              if (text) {
                label.querySelector('span').innerHTML = text
              }
            }
          })
        },
      )
    }

  pre.code(data-lang='HTML')
    code
      :highlight(lang="html")
        <div class="c-form__group"><span class="c-form__label">Add a profile picture</span>
          <input class="c-form__file-input" type="file" name="picture" id="picture" data-multiple-caption="{count} files selected" multipl required>
          <label class="c-form__file-label" for="picture">
            <strong>Choose a file</strong>
            <span></span>
          </label>
        </div>
  p Next, you can add this simple JavaScript script to automatically update the input field with the name of the file(s) selected.

  pre.code(data-lang='HTML')
    code
      :highlight(lang="html")
        <script>
          const getNextSibling = (el, selector) => {
            let sibling = el.nextElementSibling

            // If there's no selector, return the first sibling
            if (!selector) return sibling

            // If the sibling matches our selector, use it
            // If not, jump to the next sibling and continue the loop
            while (sibling) {
              if (sibling.matches(selector)) return sibling

              sibling = sibling.nextElementSibling
            }

            return sibling
          }

          if (document.querySelector('input[type=file]')) {
            Array.prototype.forEach.call(
              document.querySelectorAll('input[type=file]'),
              (input) => {
                const label = getNextSibling(input, 'label')

                input.addEventListener('change', (e) => {
                  label.querySelector('span').innerHTML = 'Loading...'

                  if (e.target) {
                    let text = ''
                    const { files } = input
                    const multipleText =
                      input.getAttribute('data-multiple-caption') ||
                      '{count} files selected'

                    if (files && files.length > 1) {
                      text = multipleText.replace('{count}', files.length.toString())
                    } else {
                      text = e.target.value.split('\\').pop()
                    }

                    if (text) {
                      label.querySelector('span').innerHTML = text
                    }
                  }
                })
              },
            )
          }
        </script>
  h2 Disabled styles

  .o-row
    .o-col.u-6(class="u-4@md")
      .c-form__group
        label.c-form__label(for="name-disabled") Name (disabled)
        input.c-form__control(type="text" id="name-disabled" name="name-disabled" placeholder="Name" disabled)
      .c-form__group
        label.c-form__label(for="message-readonly") Message (readonly)
        textarea.c-form__control(id="message-readonly" name="message-readonly" placeholder="Add your message" readonly)
      .c-form__group
        label.c-form__label Choose an option
        select.c-form__select(name="list" id="list" disabled)
          option(value="1") One
          option(value="2") Two
          option(value="3") Three
  fieldset.c-form__group(disabled)
    legend.c-form__label Gender
    .c-form__check
      input.c-form__check-input(type="radio" name="gender" id="male-disabled")
      label.c-form__check-label(for="male-disabled") Male
    .c-form__check
      input.c-form__check-input(type="radio" name="gender" id="female-disabled")
      label.c-form__check-label(for="female-disabled") Female
  .c-form__group
    span.c-form__label Active or not the checkbox
    .c-form__check
      input.c-form__check-input(type="checkbox" name="checkfield" id="check-disabled" disabled)
      label.c-form__check-label(for="check-disabled") Option 1

  pre.code(data-lang='HTML')
    code
      :highlight(lang="html")
        <div class="c-form__group">
          <label class="c-form__label" for="name">Name</label>
          <input class="c-form__control" type="text" id="name" name="name" placeholder="Name" disabled>
        </div>
        <div class="c-form__group">
          <label class="c-form__label" for="message">Message</label>
          <textarea class="c-form__control" id="message" name="message" placeholder="Add your message" disabled></textarea>
        </div>
        <div class="c-form__group">
          <label class="c-form__label">Choose an option</label>
          <select class="c-form__select" name="list" id="list" disabled>
            <option value="1">One</option>
            <option value="2">Two</option>
            <option value="3">Three</option>
          </select>
        </div>
        <fieldset class="c-form__group" disabled>
          <legend class="c-form__label">Gender</legend>
          <div class="c-form__check">
            <input class="c-form__check-input" type="radio" name="gender" id="male">
            <label class="c-form__check-label" for="male">Male</label>
          </div>
          <div class="c-form__check">
            <input class="c-form__check-input" type="radio" name="gender" id="female">
            <label class="c-form__check-label" for="female">Female</label>
          </div>
        </fieldset>
        <div class="c-form__group">
          <span class="c-form__label">Active or not the checkbox</span>
          <div class="c-form__check">
            <input class="c-form__check-input" type="checkbox" name="checkfield" id="check" disabled>
            <label class="c-form__check-label" for="check">Option 1</label>
          </div>
        </div>
  h2 Helpers

  p You can add some indications by adding texts below fields.
    br
    | Help texts should be associated with the form control it relates to using the aria-describedby attribute.

  .o-row
    .o-col.u-12(class="u-4@md")
      .c-form__group
        label.c-form__label(for="username-help") Username
        input.c-form__control(type="text" id="username-help" name="username-help" aria-describedby="usernameHelpText" required)
        span.c-form__text#usernameHelpText This field is required

  pre.code(data-lang='HTML')
    code
      :highlight(lang="html")
        <div class="c-form__group">
          <label class="c-form__label" for="username">Username</label>
          <input class="c-form__control" type="text" id="username" name="username" aria-describedby="usernameHelpText" required>
          <span class="c-form__text" id="usernameHelpText">This field is required</span>
        </div>

  p An other possibility is to use the "helper" component to display more content inside a tooltip.
  p The helper will be automatically shown if the form element is focused (works with controls, select and file elements).

  .o-row
    .o-col.u-12(class="u-4@md")
      .c-form__group
        label.c-form__label(for="username-help") Username
        input.c-form__control(type="text" id="username-help" name="username-help")
        span.c-helper.u-my-1.u-ml-2
          .c-helper__content
            span You can only use alphanumeric character. You will be able to modiy it later, so don't worry it you don't like anymore your username.

  pre.code(data-lang='HTML')
    code
      :highlight(lang="html")
        <div class="c-form__group">
          <label class="c-form__label" for="username">Username</label>
          <input class="c-form__control" type="text" id="username" name="username">
          <span class="c-helper">
            <div class="c_helper__content">
              <span>You can only use alphanumeric character. You will be able to modiy it later, so don't worry it you don't like anymore your username.</span>
            </div>
          </span>
        </div>

  h2 Validation styles / feedbacks

  p The validation messages work a bit like the helper texts.
    br
    | This behavior is greatly inspired by Bootstrap.

  .o-row
    .o-col.u-12(class="u-4@md")
      .c-form__group
        label.c-form__label(for="username-valid") Username (valid)
        input.c-form__control.is-valid(type="text" id="username-valid" name="username-valid")
        span.c-form__feedback.c-form__feedback--valid Look's good
        span.c-form__feedback.c-form__feedback--invalid The field is required
    .o-col.u-12(class="u-4@md")
      .c-form__group
        label.c-form__label(for="username-invalid") Username (invalid)
        input.c-form__control.is-invalid(type="text" id="username-invalid" name="username-invalid")
        span.c-form__feedback.c-form__feedback--valid Look's good
        span.c-form__feedback.c-form__feedback--invalid The field is required

  p The states can be managed by using the #[code .is-valid] or #[code .is-invalid] classes to the form element.
    br
    | Other, it's possible to detect the submission of the form and valid it
    | with JavaScript. Then, you need to add the #[code .is-validated] class to
    | the form to display feedback messages.

  pre.code(data-lang='HTML')
    code
      :highlight(lang="html")
        <script>
          const forms = document.querySelectorAll('.needs-validation')

          // Loop over them and prevent submission
          Array.prototype.slice.call(forms)
            .forEach(function (form) {
              form.addEventListener('submit', function (event) {
                if (!form.checkValidity()) {
                  event.preventDefault()
                  event.stopPropagation()
                }

                form.classList.add('is-validated')
              }, false)
            })
        </script>


  h2.u-mt-4(class="u-mt-5@md") Sass references

  h3 Variables - Label
  table.o-table
    thead
      tr
        th(scope=col) Name
        th(scope=col) Type
        th(scope=col) Default value
        th(scope=col) Description
    tbody
      tr
        td #[code $c-label-font-weight]
        td Number
        td 700
        td Boldness of text

  h3 Variables - Controls
  table.o-table
    thead
      tr
        th(scope=col) Name
        th(scope=col) Type
        th(scope=col) Default value
        th(scope=col) Description
    tbody
      tr
        td #[code $c-control-border-radius]
        td Number unit
        td #[code $g-form-border-radius]
        td Border-radius of input and textarea fields
      tr
        td #[code $c-control-border-width]
        td Number unit
        td #[code $g-form-border-width]
        td Thickness of the border
      tr
        td #[code $c-control-border-color]
        td Color
        td #[code $g-form-border-color]
        td Border color of fields
      tr
        td #[code $c-control-text-color]
        td Color
        td #[code $g-form-text-color]
        td Color of content inside fields
      tr
        td #[code $c-control-placeholder-color]
        td Color
        td #[code $g-form-placeholder-color]
        td Color of placeholder
      tr
        td #[code $c-control-focus-border-color]
        td Color
        td #[code $g-form-focus-border-color]
        td Color of border when the input is focused
      tr
        td #[code $c-control-focus-shadow-width]
        td Number unit
        td #[code $g-form-focus-shadow-width]
        td Size of the shadow box
      tr
        td #[code $c-control-focus-shadow-color]
        td Color
        td #[code $g-form-focus-shadow-color]
        td Color of the shadow box
      tr
        td #[code $c-control-background-color]
        td Color
        td #[code $g-form-background-color]
        td Background color
      tr
        td #[code $c-control-disabled-background]
        td Color
        td #[code $g-form-background-disabled]
        td Background color for disabled state
      tr
        td #[code $c-control-height]
        td Number unit
        td #[code 1.5vr]
        td Height of the field
      tr
        td #[code $c-control-padding]
        td Number unnit
        td #[code 0.25vr 0.5vr]
        td Padding inside the field
      tr
        td #[code $c-control-add-validation-states]
        td Boolean
        td #[code true]
        td Enable the classes for validation states

  h3 Variables - Select
  table.o-table
    thead
      tr
        th(scope=col) Name
        th(scope=col) Type
        th(scope=col) Default value
        th(scope=col) Description
    tbody
      tr
        td #[code $c-select-border-radius]
        td Number unit
        td #[code $g-form-border-radius]
        td Border-radius of select field
      tr
        td #[code $c-select-border-width]
        td Number unit
        td #[code $g-form-border-width]
        td Thickness of the border
      tr
        td #[code $c-select-border-color]
        td Color
        td #[code $g-form-border-color]
        td Border color of fields
      tr
        td #[code $c-select-text-color]
        td Color
        td #[code $g-form-text-color]
        td Color of content inside fields
      tr
        td #[code $c-select-font-size]
        td Color
        td #[code $g-form-font-size]
        td Font size
      tr
        td #[code $c-select-font-height]
        td Color
        td #[code $g-form-font-height]
        td Control the line-height for option elements in multiple/size cases
      tr
        td #[code $c-select-focus-border-color]
        td Color
        td #[code $g-form-focus-border-color]
        td Color of border when the select is focused
      tr
        td #[code $c-select-focus-shadow-width]
        td Number unit
        td #[code $g-form-focus-shadow-width]
        td Size of the shadow box
      tr
        td #[code $c-select-focus-shadow-color]
        td Color
        td #[code $g-form-focus-shadow-color]
        td Color of the shadow box
      tr
        td #[code $c-select-background-color]
        td Color
        td #[code $g-form-background-color]
        td Background color
      tr
        td #[code $c-select-background-disabled]
        td Color
        td #[code $g-form-background-disabled]
        td Background color for disabled state
      tr
        td #[code $c-select-height]
        td Number unit
        td #[code 1.5vr]
        td Height of the field
      tr
        td #[code $c-select-padding]
        td Number unnit
        td #[code 0.25vr 0.5vr]
        td Padding inside the field
      tr
        td #[code $c-select-add-validation-states]
        td Boolean
        td #[code true]
        td Enable the classes for validation states

  h3 Variables - Radio/Checkbox
  table.o-table
    thead
      tr
        th(scope=col) Name
        th(scope=col) Type
        th(scope=col) Default value
        th(scope=col) Description
    tbody
      tr
        td #[code $c-check-border-radius]
        td Number unit
        td #[code $g-form-border-radius]
        td Border-radius of checkbox inputs#[br](radio are overrided to 50% to create a circle)
      tr
        td #[code $c-check-border-width]
        td Number unit
        td #[code $g-form-border-width]
        td Thickness of the border
      tr
        td #[code $c-check-border-color]
        td Color
        td #[code $g-form-border-color]
        td Border color of field
      tr
        td #[code $c-check-focus-border-color]
        td Color
        td #[code $g-form-focus-border-color]
        td Color of border when the input is focused
      tr
        td #[code $c-check-focus-shadow-width]
        td Number unit
        td #[code $g-form-focus-shadow-width]
        td Size of the shadow box
      tr
        td #[code $c-check-focus-shadow-color]
        td Color
        td #[code $g-form-focus-shadow-color]
        td Color of the shadow box
      tr
        td #[code $c-check-checked-border-color]
        td Color
        td #[code $g-form-main-color]
        td Border color for #[code :checked] input
      tr
        td #[code $c-check-checked-bg]
        td Color
        td #[code $g-form-main-color]
        td Background color for #[code :checked] input
      tr
        td #[code $c-check-icon-checkbox]
        td String (as URL)
        td #[code iv("checkbox")]
        td URL of the image for checkbox (as path or Base64)
      tr
        td #[code $c-check-icon-radio]
        td String (as URL)
        td #[code iv("radio")]
        td URL of the image for radio (as path or Base64)
      tr
        td #[code $c-check-add-validation-states]
        td Boolean
        td #[code true]
        td Enable the classes for validation states

  h3 Variables - Toggle
  table.o-table
    thead
      tr
        th(scope=col) Name
        th(scope=col) Type
        th(scope=col) Default value
        th(scope=col) Description
    tbody
      tr
        td #[code $c-toggle-border-radius]
        td Number unit
        td #[code $g-form-border-radius]
        td Border-radius of field
      tr
        td #[code $c-toggle-text-color]
        td Color
        td #[code $g-form-text-color]
        td Color of content inside fields
      tr
        td #[code $c-toggle-bg]
        td Color
        td #[code $g-form-background-disabled]
        td Background in default state
      tr
        td #[code $c-toggle-bg-activd]
        td Color
        td #[code $g-form-main-color]
        td Background in active state
      tr
        td #[code $c-toggle-focus-shadow-width]
        td Number unit
        td #[code $g-form-focus-shadow-width]
        td Size of the shadow box
      tr
        td #[code $c-toggle-focus-shadow-color]
        td Color
        td #[code $g-form-focus-shadow-color]
        td Color of the shadow box

  h3 Variables - File
  table.o-table
    thead
      tr
        th(scope=col) Name
        th(scope=col) Type
        th(scope=col) Default value
        th(scope=col) Description
    tbody
      tr
        td #[code $c-file-border-radius]
        td Number unit
        td #[code $g-form-border-radius]
        td Border-radius of field
      tr
        td #[code $c-file-border-width]
        td Number unit
        td #[code $g-form-border-width]
        td Thickness of the border
      tr
        td #[code $c-file-border-color]
        td Color
        td #[code $g-form-border-color]
        td Border color of fields
      tr
        td #[code $c-file-label-color]
        td Color
        td #[code $g-form-text-color]
        td Color of content inside label
      tr
        td #[code $c-file-label-bg]
        td Color
        td #[code $g-form-main-color]
        td Background of placeholder
      tr
        td #[code $c-file-focus-border-color]
        td Color
        td #[code $g-form-focus-border-color]
        td Color of border when the field is focused
      tr
        td #[code $c-file-focus-shadow-width]
        td Number unit
        td #[code $g-form-focus-shadow-width]
        td Size of the shadow box
      tr
        td #[code $c-file-focus-shadow-color]
        td Color
        td #[code $g-form-focus-shadow-color]
        td Color of the shadow box
      tr
        td #[code $c-file-focus-background-color]
        td Color
        td #[code $g-form-focus-background-color]
        td Background color
      tr
        td #[code $c-file-focus-background-label]
        td Color
        td #[code $g-form-focus-background-label]
        td Background color for the left part
      tr
        td #[code $c-file-height]
        td Number unit
        td #[code 1.5vr]
        td Height of the field
      tr
        td #[code $c-file-add-validation-states]
        td Boolean
        td #[code true]
        td Enable the classes for validation states
